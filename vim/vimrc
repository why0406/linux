set encoding=utf-8
set fileencodings=utf-8,gb2312,gbk,gb18030,big5
set fenc=utf-8
set enc=utf-8
"为命令、输入、窗口导航都激活鼠标的使用
"按shift选中字符即可复制
"set mouse=a
"去掉vi一致性
set nocompatible
"设置行号
set number
"打开文件类型自动检测功能
filetype on
"记录历史行数
set history=1000
"设置背景色
set background=dark
"设置语法高亮
syntax enable
syntax on  
"配色方案  
colorscheme desert
"自动对齐  
set autoindent
"依据上面的对起格式，智能的选择对起方式
set smartindent
"第一行设置tab键为4个空格，第二行设置当行之间交错时使用4个空格
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
"设置匹配模式，类似当输入一个左括号时会匹配相应的那个右括号
set showmatch
"去除vim的GUI版本中的toolbar
set guioptions-=T
"在编辑过程中，在右下角显示光标位置的状态行
set ruler
"默认情况下，寻找匹配是高亮度显示的，该设置关闭高亮显示
set nohls
"进行查找操作时，自动跳到结果
set incsearch
"自动跳转到上次退出时光标位置
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"=========================
"配置vim状态栏,显示ale结果
"=========================
"自定义ale获取语法检查结果函数
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? '[Syntax:OK]' : printf(
                \   '[Syntax:Warn=%d Err=%d]',
                \   all_non_errors,
                \   all_errors
                \)
endfunction

" 配置vim状态栏
set statusline+=%F%m%r%h%w
"set statusline+=\ [FORMAT=%{&ff}] "显示文件类型
set statusline+=\ [TYPE=%Y]       "显示文本格式
set statusline+=\ [POS=%l,%v][%p%%] "显示光标位置
set statusline+=\ %{strftime(\"%m/%d-%H:%M\")}  "显示时间
set statusline+=\ %{LinterStatus()} "显示ale语法检查结果
"设置状态栏显示的内容
set laststatus=2 "不显示：1 长久显示：2

"=========================
"配置 ale
"=========================
let g:ale_c_always_make = 0
"是否始终开启标志列
let g:ale_sign_column_always = 0
"高亮语法错误处
let g:ale_set_highlights = 1
"自定义error和warning图标
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
"在vim自带的状态栏中整合ale
let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
"显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"普通模式下，ctrl+k前往上一个错误或警告，ctrl+j前往下一个错误或警告
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
"在窗口中显示语法检查结果
"let g:ale_set_loclist = 0
"let g:ale_set_quickfix = 1
let g:ale_open_list = 1
let g:ale_list_window_size = 3
"没有语法错误时仍然保持窗口存在
let g:ale_keep_list_window_open = 0
"文件内容变化时是否显示警告
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
"打开文件时是否显示警告
let g:ale_lint_on_enter = 0
"使用clang对c和c++进行语法检查，对python使用pylint进行语法检查
let g:ale_linters = {
\   'c++': ['clang++'],
\   'cpp': ['clang++'],
\   'c': ['clang'],
\   'python': ['pylint'],
\}
"=========================
"目录NerdTree
"=========================
let g:NERDTreeWinSize=20
"设置F3显示或隐藏NerdTree
map <F11> :NERDTreeMirror<CR>
map <F11> :NERDTreeToggle<CR>
"Delete help information at the top
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1
"如果打开的窗口只有NERDTree窗口时，直接退出vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"=========================
"nerdtree-git-plugin
"=========================
let g:NERDTreeGitStatusShowIgnored = 1
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

"=========================
"ctag
"=========================
map <silent> <F9> :TlistToggle<cr>

"=========================
"MiniBufExplorer
"=========================
map <silent> <F12>   :MBEToggle<CR>

map <silent> <C-Right>  :MBEbn<CR>
map <silent> <C-Left>   :MBEbp<CR>

"=========================
" vim-plus 配置
"=========================
call plug#begin()
Plug 'w0rp/ale'
Plug 'ervandew/supertab'
Plug 'preservim/NERDTree'
Plug 'vim-scripts/taglist.vim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'fholgado/minibufexpl.vim'
call plug#end()

